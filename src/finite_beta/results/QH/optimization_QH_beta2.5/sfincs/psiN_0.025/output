 ****************************************************************************
 SFINCS: Stellarator Fokker-Plank Iterative Neoclassical Conservative Solver
 Version 3
 Using double precision.
 Parallel job (  14 processes) detected.
 Successfully read parameters from general namelist in input.namelist.
 Successfully read parameters from geometryParameters namelist in input.namelist.
 Successfully read parameters from speciesParameters namelist in input.namelist.
 Successfully read parameters from physicsParameters namelist in input.namelist.
 Successfully read parameters from resolutionParameters namelist in input.namelist.
 Successfully read parameters from otherNumericalParameters namelist in input.namelist.
 Successfully read parameters from preconditionerOptions namelist in input.namelist.
 Successfully read parameters from export_f namelist in input.namelist.
 mumps detected
 superlu_dist not detected
 ---- Physics parameters: ----
 Number of particle species =            2
 Delta (rho* at reference parameters)          =    4.5694000000000004E-003
 alpha (e Phi / T at reference parameters)     =    1.0000000000000000     
 nu_n (collisionality at reference parameters) =    8.3156500000000008E-003
 Linear run
 ---- Numerical parameters: ----
 Ntheta             =           25
 Nzeta              =           39
 Nxi                =           60
 NL                 =            4
 Nx                 =            7
 solverTolerance    =    1.0000000000000001E-005
 Theta derivative: centered finite differences, 5-point stencil
 Zeta derivative: centered finite differences, 5-point stencil
 For solving large linear systems, an iterative Krylov solver will be used.
 Processor    0 owns theta indices   1 to  25 and zeta indices   1 to   3
 Processor    1 owns theta indices   1 to  25 and zeta indices   4 to   6
 Processor    2 owns theta indices   1 to  25 and zeta indices   7 to   9
 Processor    3 owns theta indices   1 to  25 and zeta indices  10 to  12
 Processor    4 owns theta indices   1 to  25 and zeta indices  13 to  15
 Processor    5 owns theta indices   1 to  25 and zeta indices  16 to  18
 Processor    6 owns theta indices   1 to  25 and zeta indices  19 to  21
 Processor    7 owns theta indices   1 to  25 and zeta indices  22 to  24
 Processor    8 owns theta indices   1 to  25 and zeta indices  25 to  27
 Processor    9 owns theta indices   1 to  25 and zeta indices  28 to  30
 Processor   10 owns theta indices   1 to  25 and zeta indices  31 to  33
 Processor   11 owns theta indices   1 to  25 and zeta indices  34 to  35
 Processor   12 owns theta indices   1 to  25 and zeta indices  36 to  37
 Processor   13 owns theta indices   1 to  25 and zeta indices  38 to  39
 Nxi_for_x_option:           1
 x:   6.3716484606701013E-002  0.31819201888861848       0.72419898925837300        1.2380355992150891        1.8385282202709461        2.5314881513276766        3.3734564301245800     
 Nxi for each x:           7          14          25          39          55          60          60
 min_x_for_L:           1           1           1           1           1           1           1           2           2           2           2           2           2           2           3           3           3           3           3           3           3           3           3           3           3           4           4           4           4           4           4           4           4           4           4           4           4           4           4           5           5           5           5           5           5           5           5           5           5           5           5           5           5           5           5           6           6           6           6           6
 The matrix is       507004 x      507004  elements.
 Selecting the flux surface to use based on psiN_wish =    2.5000000000000001E-002
 Reading VMEC geometry from file /Users/rogeriojorge/local/microstability_optimization/src/finite_beta/results/QH/optimization_QH_beta2.5/sfincs/../wout_final.nc
 Using radial index   4 of 101 from vmec's half mesh.
 Including   72 of   78 stellarator-symmetric modes from the VMEC file.
 Equilibrium is stellarator-symmetric.
 Successfully read VMEC geometry file /Users/rogeriojorge/local/microstability_optimization/src/finite_beta/results/QH/optimization_QH_beta2.5/sfincs/../wout_final.nc
 ---- Geometry parameters: ----
 Geometry scheme =            5
 psiAHat (Normalized toroidal flux at the last closed flux surface) =    7.5988886715941977     
 aHat (Radius of the last closed flux surface in units of RHat) =    1.7309308005502106     
 GHat (Boozer component multiplying grad zeta) =    75.569857061736556     
 IHat (Boozer component multiplying grad theta) =    1.0173275910863909E-003
 iota (Rotational transform) =   -1.2343664400267862     
 ---- Geometry parameters: ----
 Geometry scheme =            5
 psiAHat (Normalized toroidal flux at the last closed flux surface) =    7.5988886715941977     
 aHat (Radius of the last closed flux surface in units of RHat) =    1.7309308005502106     
 GHat (Boozer component multiplying grad zeta) =    75.569857061736556     
 IHat (Boozer component multiplying grad theta) =    1.0173275910863909E-003
 iota (Rotational transform) =   -1.2343664400267862     
 ------------------------------------------------------
 Done creating grids.
 Requested/actual flux surface for this calculation, in various radial coordinates:
   psiHat =   0.18997221678985496      /  0.18997221678985493     
   psiN   =    2.5000000000000001E-002 /   2.5000000000000001E-002
   rHat   =   0.27368419009386497      /  0.27368419009386502     
   rN     =   0.15811388300841897      /  0.15811388300841897     
 Selecting the input gradients of n & T from the specified ddrHat values.
 Selecting the input gradient of Phi from the specified Er.
 Entering main solver loop.
 Initializing f0
 Beginning preallocation for whichMatrix =            1
 Beginning preallocation for whichMatrix =            0
 Since this is a linear run, we will only take a single step, and not iterate Newton's method.
 Solver package which will be used: mumps                                                                           
 ------------------------------------------------------
 Finished initialization.
 Beginning the main solve.  This could take a while ...
 evaluateResidual called.
 State vector is 0 so I will skip building the first matrix when evaluating the residual.
--------- Residual function norm:  1.4711277E-05 -----------------------------
 evaluateJacobian called.
 Running populateMatrix with whichMatrix =            0
 Time to pre-assemble Jacobian preconditioner matrix:   0.50278500000000004       seconds.
 Time to assemble Jacobian preconditioner matrix:   0.64359400000000000       seconds.
 # of nonzeros in Jacobian preconditioner matrix:    13483256 , allocated:    79146608 , mallocs:           0  (should be 0)
 Running populateMatrix with whichMatrix =            1
 Time to pre-assemble Jacobian matrix:   0.70579099999999984       seconds.
 Time to assemble Jacobian matrix:    1.2634129999999999       seconds.
 # of nonzeros in Jacobian matrix:    21442440 , allocated:    79146608 , mallocs:           0  (should be 0)

Entering DMUMPS 5.6.2 from C interface with JOB, N =   1      507004
      executing #MPI =     14, without OMP

 =================================================
 MUMPS compiled with option -Dpord
 =================================================
L U Solver for unsymmetric matrices
Type of parallelism: Working host

 ****** ANALYSIS STEP ********

 ** Maximum transversal (ICNTL(6)) not allowed because matrix is distributed
 Processing a graph of size:    507004 with      12989888 edges
 Ordering based on PORD 
